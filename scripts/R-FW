#!/bin/sh

#hostname
export hostN="R-FW"


export if1N="ens192"
export if1IP="20.20.20.100"
export if1Mask="255.255.255.0"
export if1CIDR="/24"
export if2N="ens224"
export if2IP="192.168.10.1"
export if2Mask="255.255.255.252"
export if2CIDR="/30"
export if3N="ens256"
export if3IP="192.168.20.1"
export defGW="20.20.20.10"
export cleanupswitch=0


    #base setup
echo "Setting hostname and enabling packet forwarding..."
echo $hostN > /etc/hostname
echo net.ipv4.ip_forward=1 > /etc/sysctl.conf
#sed -i.bak 's%files dns%dns files%g' /etc/nsswitch.conf

#ip config
ipConfig() {
echo -n "Replacing net config... "
cat > /etc/sysconfig/network-scripts/ifcfg-$if1N << EOF
DEVICE=$if1N
ONBOOT=yes
IPADDR=$if1IP
NETMASK=$if1Mask
GATEWAY=$defGW
EOF
echo -n $if1N/
ifdown $if1N > /etc/null
ifup $if1N > /etc/null
cat > /etc/sysconfig/network-scripts/ifcfg-$if2N << EOF
DEVICE=$if2N
ONBOOT=yes
IPADDR=$if2IP
NETMASK=$if2Mask
EOF
echo -n $if2N/
ifdown $if2N > /etc/null
ifup $if2N > /etc/null
cat > /etc/sysconfig/network-scripts/ifcfg-$if3N << EOF
DEVICE=$if3N
ONBOOT=yes
IPADDR=$if3IP
NETMASK=$if3Mask
EOF
echo $if3N
ifdown $if3N > /etc/null
ifup $if3N > /etc/null
}

ipTablesGRE() {
    echo "Adding iptables NAT rule..."
	iptables --flush
    iptables -t nat -A POSTROUTING -o ens192 -j MASQUERADE #only on FW
	nmcli connection add type ip-tunnel ip-tunnel.mode gre con-name gre1 ifname gre1 remote 10.10.10.1 local 20.20.20.100
	nmcli connection modify gre1 ipv4.addresses '10.5.5.2/30'
	nmcli connection modify gre1 ipv4.method manual
	#nmcli connection modify gre1 +ipv4.routes "10.5.5.0/30 10.5.5.2"
	echo "Saving rules and making persistent..."
    iptables-save > /etc/iptables.up.rules
    cat > /etc/NetworkManager/dispatcher.d/10-iptables << EOF
#!/bin/sh

if [[ \$1 != "ens192" ]] || [[ \$2 != "up" ]]
then
	logger "\$0: Working on eth192 ..."
	iptables-restore /etc/iptables.up.rules
fi

if [[ \$1 != "gre1" ]] 
then
	logger "\$0: Working on gre1 ..."
	ip tunnel change gre1 ttl 255
fi
EOF
	chmod 744 /etc/NetworkManager/dispatcher.d/10-iptables
}

baseCentOS() {
    echo "Disabling firewall and SELinux..."
    systemctl disable -q --now firewalld #allow pings
    sed -i.bak "s/SELINUX=.*/SELINUX=disabled/g" /etc/selinux/config
    echo "Mounting disks..."
	mkdir /media/cdrom
	mount -r /dev/sr1 /media/cdrom
	mkdir /media/CentOS
	mount -r /dev/sr0 /media/CentOS
	echo "Installing packages..."
	yum --disablerepo=* --enablerepo=c7-media -q makecache >/dev/null 2>&1
	yum --disablerepo=* --enablerepo=c7-media -q -y install tcpdump net-tools vim lynx bind-utils nfs-utils cifs-utils openssh-server openssl nano libreswan>/dev/null 2>&1
	yum --disablerepo=* --enablerepo=c7-media -y install $(find /media/ -name sshpass*) $(find /media/ -name frr*) $(find /media/ -name libyang*) >/dev/null 2>&1
	echo "Packages installed"
}

hosts() {
	echo "Adding hostnames to /etc/hosts"
	cat >> /etc/hosts << EOF
10.10.10.10	ISP
10.10.10.1	L-FW
20.20.20.5	OUT-CLI
20.20.20.100	R-FW
172.16.20.10	L-SRV
172.16.50.2	L-RTR-A
#172.16.100.61	L-CLI-A
172.16.55.2	L-RTR-B
172.16.200.61	L-CLI-B
192.168.20.10	R-SRV
192.168.10.2	R-RTR
192.168.100.100	R-CLI
EOF
}

sshdEdit() {
echo "Permitting root login"
sed -i.bak "s/#PermitRootLogin.*/PermitRootLogin yes/g" /etc/ssh/sshd_config
echo "Restarting sshd..."
systemctl restart sshd
}

CA() {
	mkdir -p /etc/ca
	#sed -i.bak "0,/default_md	= .*/s//default_md	= sha1\/opt\/ca/" /etc/pki/openssl.cnf
	#creating ca
	openssl genpkey -algorithm RSA -out /etc/ca/ca.key
	openssl req -x509 -new -nodes -key /etc/ca/ca.key -sha256 -subj "/C=RU/O=WorldSkills Russia/CN=WSR CA" -days 1024 -out /etc/ca/ca.crt
	#l-fw cert/key
	openssl genpkey -algorithm RSA -out /etc/ca/l-fw.key
	openssl req -new -sha256 -key /etc/ca/l-fw.key -subj "/C=RU/O=WorldSkills Russia/CN=WSR SRV" -out /etc/ca/l-fw.csr
	openssl x509 -req -in /etc/ca/l-fw.csr -CA /etc/ca/ca.crt -CAkey /etc/ca/ca.key -CAcreateserial -out /etc/ca/l-fw.crt -days 500 -sha256
	#out-cli cert/key
	openssl genpkey -algorithm RSA -out /etc/ca/out-cli.key
	openssl req -new -sha256 -key /etc/ca/out-cli.key -subj "/C=RU/O=WorldSkills Russia/CN=WSR CLI" -out /etc/ca/out-cli.csr
	openssl x509 -req -in /etc/ca/out-cli.csr -CA /etc/ca/ca.crt -CAkey /etc/ca/ca.key -CAcreateserial -out /etc/ca/out-cli.crt -days 500 -sha256

	# OMG, fuck ovpn and OpenSSL
	# I spent way too much time on this bullshit and
	# after the TLS authentication failed I had to
	# spend several hours on trying to find why in the fuck,
	# and you know what the problem was?
	# The damn CNs being the same,
	# if it wasn't mentioned by a kind person on stack overflow,
	# this shit wouldn't be working, so props to
	# the person who asked the question and the one who answered,
	# they're the real fucking heroes of this story:
	#  https://stackoverflow.com/questions/19726138/openssl-error-18-at-0-depth-lookupself-signed-certificate
}

ospf() {
	echo "Configuring OSPF"
	sed -i.bak "s/ospfd.*/ospfd=yes/g" /etc/frr/daemons
	sed -i.bak "s/zebra.*/zebra=yes/g" /etc/frr/daemons
	systemctl restart frr
	systemctl enable frr
	cat > /etc/frr/frr.conf << EOF
frr version 6.0.2
frr defaults traditional
hostname $hostN
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
router-id 4.4.4.4
!
router ospf
 passive-interface ens256
 network 10.5.5.0/30 area 0
 network 192.168.10.0/30 area 0
 network 192.168.20.0/24 area 0
!
line vty
!
EOF
	systemctl restart frr
}

ipSec() {
	cat >> /etc/ipsec.d/vpn.conf << EOF
conn vpn
	auto=start
	type=tunnel
	authby=secret
	ike=3des-sha1;dh14
	esp=aes-sha2
	left=10.10.10.1
	right=20.20.20.100
	pfs=no
EOF
	echo '10.10.10.1 20.20.20.100 : PSK "WSR 2019"' > /etc/ipsec.d/vpn.secrets
	ipsec start
	systemctl enable ipsec
}

cleanup() {
	echo 'set +o history' >> /etc/profile
	history -c
}

ipConfig
hosts
baseCentOS
ipTablesGRE
sshdEdit
ospf
CA
ipSec

if [[ $cleanupswitch == 1 ]]; then cleanup; fi

echo DONE
rm -f $0
sleep 120
reboot
